[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec2 rect_size = vec2(1024, 600);
uniform float cell_size : hint_range(2, 64) = 16.0;
uniform sampler2D cell_texture : hint_black;
uniform bool reverse = false;
uniform bool cutoff = false;
uniform float cutoff_value : hint_range(0, 1) = 0.5;
uniform bool colored = true;
uniform float brightness : hint_range(0, 2) = 1.0;
uniform float corner_size : hint_range(0, 1) = 0.2;
uniform vec4 corner_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform float blur_amount : hint_range(0, 1) = 0.5;

void fragment() {
	vec2 cell_scale = cell_size / rect_size;
	vec2 coord = UV / cell_scale;
	vec2 uv = fract(coord);
	vec2 dis = abs(uv - 0.5);
	if (dis.x + dis.y > 1.0 - corner_size) {
		COLOR = corner_color;
	}
	else {
		vec2 source_uv = (floor(coord) + 0.5) * cell_scale;
		float mipmap = ceil(log2(cell_size) * blur_amount);
		vec3 source = textureLod(TEXTURE, source_uv, mipmap).rgb;
		
		float sat = (source.r +source.g +source.b) / 3.0;
		if (reverse) sat = 1.0 - sat;
		if (cutoff) sat = step(cutoff_value, sat);
		if (colored) {
			vec3 cell = texture(cell_texture, uv).rgb;
			vec3 grey_scale = vec3((cell.r + cell.g + cell.b) / 3.0);
			COLOR = vec4(grey_scale * source * brightness, 1.0);
		}
		else {
			COLOR = vec4(texture(cell_texture, uv).rgb * sat * brightness, 1.0);
		}
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/rect_size = Vector2( 1024, 600 )
shader_param/cell_size = 16.0
shader_param/reverse = false
shader_param/cutoff = false
shader_param/cutoff_value = 0.5
shader_param/colored = true
shader_param/brightness = 2.0
shader_param/corner_size = 0.2
shader_param/corner_color = Color( 0, 0, 0, 1 )
shader_param/blur_amount = 1.0
shader_param/cell_texture = ExtResource( 1 )
